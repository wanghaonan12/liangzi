<template>
  <div class="wrapper">
    <el-row class="table-toolbar">
      <div class="left">
        <el-input v-model="tableQuery.searchText" placeholder="请输入检索关键字" size="mini" class="search-input" />
        <el-button size="mini" type="primary" @click="getChronicleTableData">检索</el-button>
      </div>
      <div class="right">
        <el-button size="mini" type="primary" @click="onAddButtonClick">新增</el-button>
        <el-button size="mini" type="danger" @click="onDelButtonClick">删除</el-button>
        <el-button size="mini" type="success" @click="publishHandler">批量发布</el-button>
        <el-button size="mini" type="warning" @click="upPublishHandler">批量撤回</el-button>
      </div>
    </el-row>
    <el-table
      :data="tableData"
      border
      stripe
      size="mini"
      style="width: 100%"
      height="660"
      @select="onSelectionChange"
      @select-all="selectAll">
      <el-table-column type="selection" align="center" />
      <el-table-column type="index" label="序号" width="80" align="center">
        <template slot-scope="{ $index }">
          <span>{{ (tableQuery.pageNum - 1) * tableQuery.pageSize + $index + 1 }}</span>
        </template>
      </el-table-column>
      <el-table-column prop="title" label="标题" width="180" align="center" />
      <el-table-column prop="contentAbstract" label="摘要" width="180" align="center" />
      <el-table-column prop="content" label="内容" width="600" align="center"></el-table-column>
      <el-table-column prop="enablePublish" label="是否发布" align="center">
        <template slot-scope="{ row }">
          <el-tag type="success" v-if=" row.enablePublish | enablePublishFilter === '是'">{{ row.enablePublish | enablePublishFilter }}</el-tag>
          <el-tag type="info" v-else>{{ row.enablePublish | enablePublishFilter }}</el-tag>
        </template>
      </el-table-column>
      <el-table-column prop="memo" label="操作" width="200" align="center">
        <template slot-scope="{ row }" align="center">
          <el-button type="danger" size="mini" @click="onModifyButtonClick(row)">编辑</el-button>
          <el-button type="success" size="mini" @click="onFileButtonClick(row)">附件</el-button>
        </template>
      </el-table-column>
    </el-table>
    <pagination
      v-show="total > 0"
      layout="total, prev, pager, next, jumper"
      :total="total"
      :page.sync="tableQuery.pageNum"
      :limit.sync="tableQuery.pageSize"
      @pagination="getChronicleTableData" />
    <modify-dialog ref="modifyDialog" @refreshTableData="getChronicleTableData" />
    <chronicle-file-dialog ref="chronicleFileDialog" @refreshTableData="getChronicleFileData"></chronicle-file-dialog>
  </div>
</template>

<script>
import { getChronicleList, deleteChronicleByIds, pulishChronicle, getChronicleFileByChronicleId } from '@/api/chronicle'
import Pagination from '@/components/Pagination'
import ModifyDialog from '@/views/chronicleManagement/components/ModifyDialog'
import ChronicleFileDialog from '@/views/chronicleManagement/components/ChronicleFileDialog.vue'
export default {
  components: {
    Pagination,
    ModifyDialog,
    ChronicleFileDialog
  },
  data() {
    return {
      tableQuery: {
        pageNum: 1,
        pageSize: 8,
        searchText: ''
      },
      tableData: [],
      tableFileData: [],
      fileTotal: 0,
      tableSelection: [],
      total: 0,
      publishDto: {
        ids: [],
        isPublished: 'true'
      },
      upPublishDto: {
        ids: [],
        isPublished: 'false'
      }
    }
  },
  mounted() {
    this.getChronicleTableData()
  },
  methods: {
    publishHandler() {
      if (!this.tableSelection.length) {
        this.$message('请勾选条目')
        return
      }
      this.$confirm('确定执行该操作吗？', '确认')
        .then((r) => {
          let ids = []
          const tableSelection = this.tableSelection
          tableSelection.map((item) => {
            ids.push(item.id)
          })
          this.publishDto.ids = ids
          // var di = ids.toString().substring(0,ids.toString().length)
          pulishChronicle(this.publishDto).then((res) => {
            console.log(res)
            if (res.status) {
              this.$message('发布成功')
              this.getChronicleTableData()
            } else {
              this.$message('发布失败')
            }
          })
        })
        .catch()
    },
    upPublishHandler() {
      if (!this.tableSelection.length) {
        this.$message('请勾选条目')
        return
      }
      this.$confirm('确定执行该操作吗？', '确认')
        .then((r) => {
          let ids = []
          const tableSelection = this.tableSelection
          tableSelection.map((item) => {
            ids.push(item.id)
          })
          this.upPublishDto.ids = ids
          // var di = ids.toString().substring(0,ids.toString().length)
          pulishChronicle(this.upPublishDto).then((res) => {
            console.log(res)
            if (res.status) {
              this.$message('撤回成功')
              this.getChronicleTableData()
            } else {
              this.$message('发布失败')
            }
          })
        })
        .catch()
    },
    async getChronicleTableData() {
      const res = await getChronicleList(this.tableQuery)
      console.log(res)
      if (res && res.status) {
        this.tableData = res.content.rows
        this.total = res.content.total
      } else {
        this.$message(res.message)
      }
    },

    async getChronicleFileData(idi) {
      const res = await getChronicleFileByChronicleId(idi)
      console.log(res)
      this.tableFileData = []
      if (res && res.status) {
        this.tableFileData = res.content
        console.log('tableFiledeDadjkkkk====================')
        console.log(this.tableFileData)
        // this.$emit('refreshTableData')
      } else {
        this.$message(res.message)
      }
    },
    onSelectionChange(s, row) {
      this.tableSelection = s
    },
    onAddButtonClick(row) {
      this.$refs.modifyDialog.showDialog(row, 'add')
    },
    onModifyButtonClick(row) {
      this.$refs.modifyDialog.showDialog(row, 'edit')
    },
    onFileButtonClick(row) {
      console.log(parseInt(row.id))
      // console.log("xia");
      // console.log(data);
      this.$refs.chronicleFileDialog.showDialog(row)
      //  this.getChronicleFileData(parseInt(row.id))

      // this.$refs.chronicleFileDialog.
    },
    selectAll(selection) {
      this.tableSelection = []
      this.tableSelection = selection
    },
    onDelButtonClick() {
      if (!this.tableSelection.length) {
        this.$message('请勾选条目')
        return
      }
      this.$confirm('确定执行该操作吗？', '确认')
        .then((r) => {
          let ids = []
          const tableSelection = this.tableSelection
          tableSelection.map((item) => {
            ids.push(item.id)
          })
          var di = ids.toString().substring(0, ids.toString().length)
          deleteChronicleByIds({ ids: di }).then((res) => {
            console.log(res)
            if (res.status) {
              this.$message('删除成功')
              this.getChronicleTableData()
            } else {
              this.$message('删除失败')
            }
          })
        })
        .catch()
    }
  },
  filters: {
    // defaultUploadFilter: function (value) {
    //   return value % 2 ? '是' : '否'
    // },
    enablePublishFilter: function (value) {
      return value % 2 ? '是' : '否'
    }
  }
}
</script>

<style lang="scss" scoped>
.wrapper {
  padding: 10px 18px;

  .table-toolbar {
    margin-bottom: 10px;

    .left {
      float: left;

      .search-input {
        width: 210px;
        margin-right: 10px;
      }
    }

    .right {
      float: right;
    }
  }
}
</style>
