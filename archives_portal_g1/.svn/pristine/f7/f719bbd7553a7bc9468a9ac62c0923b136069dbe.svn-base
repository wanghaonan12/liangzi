package com.pde.pdes.portal.notify.service.impl;

import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.pde.pdes.portal.notify.po.PortalNotifyFile;
import com.pde.pdes.portal.notify.service.PortalNotifyFileService;
import com.pde.pdes.portal.notify.mapper.PortalNotifyFileMapper;
import com.pde.pdes.portal.standard.Utils.AliYunOssClientUtils;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.util.List;

/**
 * @author jiangyiheng
 * @description 针对表【pdes_portal_notify_file(通知公告附件)】的数据库操作Service实现
 * @createDate 2022-11-30 09:59:12
 */
@Service
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class PortalNotifyFileServiceImpl extends ServiceImpl<PortalNotifyFileMapper, PortalNotifyFile> implements PortalNotifyFileService {

    private final PortalNotifyFileMapper portalNotifyFileMapper;

    private final AliYunOssClientUtils aliYunOssClientUtils;

    @Override
    public int addPortalNotifyFile(Integer notifyId, MultipartFile multipartFile) {
        File file = null;
        int size = (int) multipartFile.getSize();
        String fileName = multipartFile.getOriginalFilename();
        String suffix = fileName.substring(fileName.lastIndexOf("."));
        try {
            file = File.createTempFile("file_", suffix);
            multipartFile.transferTo(file);
        } catch (Exception e) {
            log.error("MultipartFile转File失败", e);
        }
        String path = aliYunOssClientUtils.uploadObjectOss(file, "LiangZi");
        return portalNotifyFileMapper.insert(PortalNotifyFile.builder().notifyId(notifyId).
                fileName(fileName).
                filePath(path).
                fileSize(size).
                fileSuffix(suffix).orderSeq(1).build());
    }


    @Override
    public List<PortalNotifyFile> selectPortalNotifyFileByNotifyId(Integer notifyId) {
        return list(Wrappers.lambdaQuery(PortalNotifyFile.class).eq(PortalNotifyFile::getNotifyId, notifyId).orderByAsc(PortalNotifyFile::getOrderSeq));
    }

    @Override
    public boolean deletePortalNotifyFileById(Integer id) {
        return removeById(id);
    }


    @Override
    public List<PortalNotifyFile> selectPortalNotifyFileByJPG(Integer num) {
        String[] strings={".xbm",".tif",".pjp",".svgz",".jpg",".jpeg",".ico",".tiff",".gif",".svg",".jfif",".webp",".png",".bmp",".pjpeg",".avif"};
        return list(Wrappers.lambdaQuery(PortalNotifyFile.class).in(PortalNotifyFile::getFileSuffix,strings).orderByAsc(PortalNotifyFile::getCreateTime).last("limit "+num));
    }
}




