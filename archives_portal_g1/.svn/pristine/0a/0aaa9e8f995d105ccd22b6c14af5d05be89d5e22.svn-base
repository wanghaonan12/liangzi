package com.pde.pdes.portal.video.utils;

import com.google.common.collect.Lists;
import com.pde.pdes.portal.Constants.Constants;
import com.pde.pdes.portal.video.vo.FileUploadVO;
import io.minio.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import javax.annotation.PostConstruct;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.UUID;

/**
 * @description: minIO操作
 * @author: mth
 * @date: 2022/4/14
 **/
@Component
@Configuration
public class MinIoUtils {

    @Value("${minio.endPoint}")
    private String endPoint;

    @Value("${minio.accessKey}")
    private String accessKey;

    @Value("${minio.secretKey}")
    private String secretKey;

    private MinioClient instance;

    @PostConstruct
    public void init() {
        instance = MinioClient.builder()
                .endpoint(endPoint)
                .credentials(accessKey, secretKey)
                .build();
    }

    /**
     * 批量上传文件
     *
     * @param folder        模块文件夹
     * @param multipartFile multipartFile
     * @return 上传结果
     * @throws Exception Exception
     */
    public List<FileUploadVO> fileUpload(String bucketName, String folder, MultipartFile[] multipartFile) throws Exception {
        List<FileUploadVO> fileUploadInfoList = Lists.newArrayList();
        for (MultipartFile file : multipartFile) {
            // 获取源文件名
            String fileName = file.getOriginalFilename();
            String objectName = null;
            Integer fileSize = Math.toIntExact(file.getSize());
            // 拆解字符串，获取文件后缀名
            String[] split = fileName.split("\\.");
            String suffix = null;
            if (split.length > 1) {
                suffix = split[1];
                fileName = split[0] + "." + split[1];
                // 存储桶内存储对象名为随机UUID加文件后缀名
                objectName = "/" + folder + "/" + UUID.randomUUID() + "." + suffix;

            } else {
                objectName = "/" + folder + "/" + UUID.randomUUID();
            }
            InputStream in = null;
            try {
                in = file.getInputStream();
                instance.putObject(PutObjectArgs.builder()
                        .bucket(bucketName)
                        .object(objectName)
                        .stream(in, in.available(), -1)
                        .contentType(file.getContentType())
                        .build()
                );
                String filePath = Constants.MINIO_URL_PREFIX + objectName;
                FileUploadVO fileUploadInfo = FileUploadVO.builder().filePath(filePath).fileName(fileName).fileSize(fileSize).build();
                fileUploadInfoList.add(fileUploadInfo);
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (in != null) {
                    try {
                        in.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        return fileUploadInfoList;
    }

    /**
     * 判断 bucket是否存在
     */
    public boolean bucketExists(String bucketName) throws Exception {
        return instance.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build());
    }

    /**
     * 创建 bucket
     */
    public void makeBucket(String bucketName) throws Exception {
        boolean isExist = this.bucketExists(bucketName);
        if (!isExist) {
            instance.makeBucket(
                    MakeBucketArgs.builder()
                            .bucket(bucketName)
                            .build());
        }
    }

    /**
     * 文件上传
     *
     * @param bucketName bucket名称
     * @param objectName 对象名称，文件名称
     * @param filepath   文件路径
     */
    public ObjectWriteResponse putObject(String bucketName, String objectName, String filepath) throws Exception {
        return instance.uploadObject(
                UploadObjectArgs.builder()
                        .bucket(bucketName)
                        .object(objectName)
                        .filename(filepath).build());
    }

    /**
     * 文件上传
     *
     * @param bucketName  bucket名称
     * @param objectName  对象名称，文件名称
     * @param inputStream 文件输入流
     */
    public ObjectWriteResponse putObject(String bucketName, String objectName, InputStream inputStream) throws Exception {
        return instance.putObject(
                PutObjectArgs.builder()
                        .bucket(bucketName)
                        .object(objectName).stream(inputStream, -1, 10485760)
                        .build());
    }

    /**
     * 删除文件
     *
     * @param bucketName bucket名称
     * @param objectName 对象名称
     */
    public void removeObject(String bucketName, String objectName) throws Exception {
        instance.removeObject(
                RemoveObjectArgs.builder()
                        .bucket(bucketName)
                        .object(objectName)
                        .build());
    }
}