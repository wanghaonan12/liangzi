package com.pde.pdes.portal.news.controller;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.pde.pdes.portal.Constants.Constants;
import com.pde.pdes.portal.company.dto.QueryCondition;
import com.pde.pdes.portal.news.po.NewsFilePo;
import com.pde.pdes.portal.news.po.NewsPo;
import com.pde.pdes.portal.news.service.NewsFileService;
import com.pde.pdes.portal.vo.SimpleResponse;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.async.WebAsyncTask;

import javax.annotation.Resource;
import java.util.HashMap;
import java.util.Map;

/**
 * @author 沈建树
 */
@RestController
@Api(tags = {"新闻附件服务"})
@RequestMapping("/newsFile")
public class NewsFileController {
    @Resource
    NewsFileService newsFileService;

    @PostMapping ("/find")
    @ApiOperation("获取新闻附件列表")
    public WebAsyncTask<SimpleResponse<Map<String, Object>>> find(@RequestBody QueryCondition query) {
        return new WebAsyncTask<>(30 * 1000L, Constants.EXECUTOR_NAME, () -> {
            Map<String, Object> map = new HashMap<String, Object>(2);
            Page<NewsFilePo> page = PageHelper.startPage(query.getPageNum(), query.getPageSize(), true, false, false);
            newsFileService.getFiles(query.getSearchText());
            map.put("total", page.getTotal());
            map.put("rows", page.getResult());
            return new SimpleResponse<>(true, "操作成功", map);
        });
    }

    @GetMapping("/findById")
    @ApiOperation("根据新闻ID获取新闻附件")
    public WebAsyncTask<SimpleResponse<NewsFilePo>> findById(Integer id) {
        return new WebAsyncTask<>(30 * 1000L, Constants.EXECUTOR_NAME, () -> new SimpleResponse<>(newsFileService.getFileById(id)));
    }

    @PostMapping("/add")
    @ApiOperation("添加新闻附件")
    public WebAsyncTask<SimpleResponse<Boolean>> add(@RequestBody NewsFilePo newsFilePo) {
        return new WebAsyncTask<>(30 * 1000L, Constants.EXECUTOR_NAME, () -> new SimpleResponse<>(newsFileService.addFile(newsFilePo)));
    }

    @DeleteMapping("/delete")
    @ApiOperation("根据新闻ID删除新闻附件")
    public WebAsyncTask<SimpleResponse<Boolean>> delete(Integer id) {
        return new WebAsyncTask<>(30 * 1000L, Constants.EXECUTOR_NAME, () -> new SimpleResponse<>(newsFileService.deleteFileById(id)));
    }
    @PostMapping("/update")
    @ApiOperation("根据新闻附件实体参数ID更新")
    public WebAsyncTask<SimpleResponse<Boolean>> update(@RequestBody NewsFilePo newsFilePo) {
        return new WebAsyncTask<>(30 * 1000L, Constants.EXECUTOR_NAME, () -> new SimpleResponse<>(newsFileService.update(newsFilePo)));
    }
}
