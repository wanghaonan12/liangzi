package com.pde.pdes.portal.honor.service.imp;

import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.pde.p10c.auth.JwtTokenManager;
import com.pde.pdes.portal.honor.dto.HonorDTO;
import com.pde.pdes.portal.honor.dto.HonorFileDTO;
import com.pde.pdes.portal.honor.mapper.HonorFileMapper;
import com.pde.pdes.portal.honor.mapper.HonorMapper;
import com.pde.pdes.portal.honor.po.HonorFilePO;
import com.pde.pdes.portal.honor.po.HonorPO;
import com.pde.pdes.portal.honor.service.HonorService;
import com.pde.pdes.portal.honor.vo.HonorVO;
import lombok.SneakyThrows;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import java.util.Arrays;
import java.util.List;

import static com.pde.pdes.portal.honor.utils.GetResourceLengthUtils.getResourceLength;

@Service
public class HonorServiceImp extends ServiceImpl<HonorMapper, HonorPO> implements HonorService {


    @Autowired
    private HonorMapper honorMapper;

    @Autowired
    private HonorFileMapper honorFileMapper;


    @Override
    public Boolean addHonor(HonorDTO dto) {
        Assert.notNull(dto, "数据不能为空");
        HonorPO honorPO = new HonorPO();
        BeanUtils.copyProperties(dto, honorPO, "id,create_time");
        honorMapper.insert(honorPO);
        return true;
    }

    @Override
    public boolean removeById(Integer[] ids) {
        Assert.notNull(ids, "相册id为空");
        List<Integer> list = Arrays.asList(ids);
        // 删除相册对应照片
        for (Integer id : list) {
            List<HonorFilePO> honorFileS = honorFileMapper.selectAllByHonorId(id);
            honorFileMapper.deleteBatchIds(honorFileS);
        }
        honorMapper.deleteBatchIds(list);
        return true;
    }

    @Override
    public boolean update(HonorDTO dto) {
        Assert.notNull(dto, "不能为空");
        HonorPO honorPO = honorMapper.selectById(dto.getId());
        Assert.notNull(honorPO, "没有此相册");
        BeanUtils.copyProperties(dto, honorPO);
        honorMapper.updateById(honorPO);
        return true;
    }


    @Override
    public List<HonorVO> findImage(String title) {
        List<HonorVO> honorVOS = honorMapper.selectLikeTile(title);
        for (HonorVO honorVO : honorVOS) {
            if (honorVO.getFile_path() == null) {
                honorVO.setFile_path("https://chl-bucket.oss-cn-hangzhou.aliyuncs.com/error/1.jpg");
            }
        }
        return honorVOS;

    }

    @SneakyThrows
    @Override
    public boolean addImage(HonorFileDTO dto) {
        HonorPO honorPO = honorMapper.selectById(dto.getHonor_id());
        Assert.notNull(honorPO, "没有此相册");
        Assert.notNull(dto.getFile_path(), "图片不能为空");

        // 获取传入图片大小
        int imageLength = (int) getResourceLength(dto.getFile_path());

        HonorFilePO honorFilePO = new HonorFilePO();
        BeanUtils.copyProperties(dto, honorFilePO, "id");

        // 设为封面
        if (honorFilePO.isEnable_front() && honorFilePO.getHonor_id() == null) {
            HonorFilePO enableFront = honorFileMapper
                    .selectByHonorIdAndEnableFront(dto.getHonor_id(), dto.isEnable_front());
            enableFront.setEnable_front(false);
            honorFileMapper.updateById(enableFront);
        }
        honorFilePO.setFile_size(imageLength);

        honorFileMapper.insert(honorFilePO);
        return true;
    }

    @Override
    public List<HonorFilePO> findImage(Integer honorId) {
        List<HonorFilePO> honorFilePOS = honorFileMapper.selectAllByHonorId(honorId);
        return honorFilePOS;
    }

    @SneakyThrows
    @Override
    public boolean updateImage(HonorFileDTO dto) {
        Assert.notNull(dto, "不能为空");


        // 获取传入图片大小
        int imageLength = (int) getResourceLength(dto.getFile_path());

        HonorFilePO honorFilePO = honorFileMapper.selectById(dto.getId());
        Assert.notNull(honorFilePO, "没有此相片");
        BeanUtils.copyProperties(dto, honorFilePO);
        // 设为封面
        if (honorFilePO.isEnable_front()) {
            HonorFilePO enableFront = honorFileMapper.selectByHonorIdAndEnableFront(honorFilePO.getHonor_id(), honorFilePO.isEnable_front());
            enableFront.setEnable_front(false);
            honorFileMapper.updateById(enableFront);
        }
        honorFilePO.setFile_size(imageLength);
        honorFileMapper.updateById(honorFilePO);


        return true;
    }

    @Override
    public boolean removeImageById(Integer[] ids) {
        Assert.notNull(ids, "id为空");
        List<Integer> list = Arrays.asList(ids);
        honorFileMapper.deleteBatchIds(list);
        return true;
    }

    @Override
    public List<HonorVO> getCoverList() {

        return honorMapper.selectHomePage();
    }

    public static void main(String[] args) {
        JwtTokenManager jtm = new JwtTokenManager();
        String token = jtm.createToken("chl");
        System.out.println(token);
    }

}
