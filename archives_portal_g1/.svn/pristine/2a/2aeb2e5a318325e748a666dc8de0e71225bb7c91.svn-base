package com.pde.pdes.portal.notify.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.pde.Application;
import com.pde.pdes.portal.notify.mapper.PortalNotifyFileMapper;
import com.pde.pdes.portal.notify.po.PortalNotifyFile;
import com.pde.pdes.portal.notify.service.PortalNotifyFileService;
import com.pde.pdes.portal.standard.utils.AliYunOssClientUtils;
import org.apache.commons.io.IOUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.web.multipart.MultipartFile;

import javax.annotation.Resource;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@SpringBootTest(classes = Application.class)
@RunWith(SpringRunner.class)
public class PortalNotifyFileServiceImplTest {

    @Resource
    private PortalNotifyFileService portalNotifyFileServiceImplUnderTest;


    @Test
    public void testAddPortalNotifyFile() throws IOException {
        // Setup
        MultipartFile multipartFile = null;
        String filePath = "D:/a/b";
        File dir = new File(filePath);
        // 检查放置文件的文件夹路径是否存在，不存在则创建
        if (!dir.exists()) {
            dir.mkdirs();
        }
        File file = new File(filePath + "/filename.txt");
        FileWriter writer = null;
        try {
            // 检查目标文件是否存在，不存在则创建
            if (!file.exists()) {
                file.createNewFile();
            }
            // 向目标文件中写入内容
            writer = new FileWriter(file, true);
            writer.append("your content");
            writer.flush();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (null != writer)
                writer.close();
        }

        FileInputStream input = new FileInputStream(file);
        multipartFile = new MockMultipartFile("file", file.getName(), "multipart/form-data", IOUtils.toByteArray(input));

        // Run the test
        final int result = portalNotifyFileServiceImplUnderTest.addPortalNotifyFile(0, multipartFile);

        // Verify the results
        System.out.println(result);

    }

    @Test
    public void testSelectPortalNotifyFileByNotifyId() {

        // Run the test
        final List<PortalNotifyFile> result = portalNotifyFileServiceImplUnderTest.selectPortalNotifyFileByNotifyId(0);

        // Verify the results
        System.out.println(result);

    }

    @Test
    public void testDeletePortalNotifyFileById() {
        // Run the test
        final boolean result = portalNotifyFileServiceImplUnderTest.deletePortalNotifyFileById(18);

        // Verify the results
        System.out.println(result);

    }

    @Test
    public void testSelectPortalNotifyFileByJpg() {

        // Run the test
        final List<PortalNotifyFile> result = portalNotifyFileServiceImplUnderTest.selectPortalNotifyFileByJpg(0);

        // Verify the results
        System.out.println(result);

    }

    @Test
    public void testDeletePortalNotifyFileBatchById() {

        // Run the test
        final Integer result = portalNotifyFileServiceImplUnderTest.deletePortalNotifyFileBatchById(Arrays.asList(0));

        // Verify the results
        System.out.println(result);
    }
}
