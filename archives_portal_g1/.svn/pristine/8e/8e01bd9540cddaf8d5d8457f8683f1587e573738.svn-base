package com.pde.pdes.portal.chronicle.controller;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.pde.pdes.portal.Constants.Constants;
import com.pde.pdes.portal.chronicle.dto.PdesPortalChronicleEventsDto;
import com.pde.pdes.portal.chronicle.dto.PublishDto;
import com.pde.pdes.portal.chronicle.po.PdesPortalChronicleEvents;
import com.pde.pdes.portal.chronicle.service.PdesPortalChronicleEventsService;
import com.pde.pdes.portal.company.dto.QueryCondition;
import com.pde.pdes.portal.company.po.CompanyPO;
import com.pde.pdes.portal.vo.SimpleResponse;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.async.WebAsyncTask;

import javax.annotation.Resource;
import javax.validation.Valid;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author SYKCOMPUTER
 */
@RestController
@Api(tags = {"档案大事记Api"})
@RequestMapping("/")
public class PdesPortalChronicleEventsController {
    @Resource
    private PdesPortalChronicleEventsService pdesPortalChronicleEventsService;

    @PostMapping("chronicle/add")
    @ApiOperation(value = "添加大事记")
    public WebAsyncTask<SimpleResponse<?>> add(@Valid @RequestBody PdesPortalChronicleEventsDto po) {
        return new WebAsyncTask<SimpleResponse<?>>(30 * 1000L, Constants.EXECUTOR_NAME, () -> {
            return new SimpleResponse<Boolean>(pdesPortalChronicleEventsService.add(po));
        });
    }

    @DeleteMapping("chronicle/{id}")
    @ApiOperation(value = "删除大事记")
    public WebAsyncTask<SimpleResponse<?>> removeById(@PathVariable(name = "id", required = true) String id) {
        return new WebAsyncTask<SimpleResponse<?>>(30 * 1000L, Constants.EXECUTOR_NAME, () -> {
            return new SimpleResponse<Boolean>(pdesPortalChronicleEventsService.deleteById(id));
        });
    }

    @DeleteMapping("chronicle/deleteByIds")
    @ApiOperation(value = "删除大事记")
    public WebAsyncTask<SimpleResponse<?>> removeById(@RequestParam(name = "ids", required = true) List<Integer> ids) {
        return new WebAsyncTask<SimpleResponse<?>>(30 * 1000L, Constants.EXECUTOR_NAME, () -> {
            return new SimpleResponse<Boolean>(pdesPortalChronicleEventsService.deleteByIds(ids));
        });
    }

    @PostMapping("chronicle/updateByIds")
    @ApiOperation(value = "发布大事记")
    public WebAsyncTask<SimpleResponse<?>> publishByIds(@RequestBody(required = true) PublishDto publishDto) {
        return new WebAsyncTask<SimpleResponse<?>>(30 * 1000L, Constants.EXECUTOR_NAME, () -> {
            return new SimpleResponse<Boolean>(pdesPortalChronicleEventsService.isPublished(publishDto.getIsPublished(),publishDto.getIds()));
        });
    }

    @GetMapping("chronicle/{id}")
    @ApiOperation(value = "根据ID获取大事记")
    public WebAsyncTask<SimpleResponse<?>> findById(@PathVariable(name = "id", required = true) String id) {
        return new WebAsyncTask<SimpleResponse<?>>(30 * 1000L, Constants.EXECUTOR_NAME, () -> {
            return new SimpleResponse<PdesPortalChronicleEvents>(pdesPortalChronicleEventsService.findById(id));
        });
    }

    @PostMapping("v1/chronicle/find")
    @ApiOperation(value = "获取大事记列表")
    public WebAsyncTask<SimpleResponse<?>> getList(@RequestBody QueryCondition query) {
        return new WebAsyncTask<SimpleResponse<?>>(30 * 1000L, Constants.EXECUTOR_NAME, () -> {
            Map<String, Object> map = new HashMap<String, Object>();
            Page<CompanyPO> page = PageHelper.startPage(query.getPageNum(), query.getPageSize(), true, false, false);
            pdesPortalChronicleEventsService.find(query.getSearchText());
            map.put("total", page.getTotal());
            map.put("rows", page.getResult());
            return new SimpleResponse<Object>(true, "操作成功", map);
        });
    }

    @PostMapping("chronicle/update")
    @ApiOperation(value = "根据编辑大事记")
    public WebAsyncTask<SimpleResponse<?>> updateEvent(@RequestBody PdesPortalChronicleEvents pdeEvent) {
     return new WebAsyncTask<SimpleResponse<?>>(30 * 1000L, Constants.EXECUTOR_NAME, () -> {
         return new SimpleResponse<PdesPortalChronicleEvents>(pdesPortalChronicleEventsService.updateEvent(pdeEvent));
     });
    }
}
