package com.pde.pdes.portal.company.controller;

import java.util.HashMap;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.async.WebAsyncTask;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.pde.pdes.portal.Constants.Constants;
import com.pde.pdes.portal.company.dto.CompanyDTO;
import com.pde.pdes.portal.company.dto.QueryCondition;
import com.pde.pdes.portal.company.po.CompanyPO;
import com.pde.pdes.portal.company.service.CompanyService;
import com.pde.pdes.portal.vo.SimpleResponse;

@RestController
@Api(tags = {"公司信息DEMO服务"})
@RequestMapping("/company")
public class CompanyController {

    @Autowired
    private CompanyService service;

    @PostMapping
    @ApiOperation(value = "添加")
    public WebAsyncTask<SimpleResponse<?>> add(@Valid @RequestBody CompanyDTO po) {
        return new WebAsyncTask<SimpleResponse<?>>(30 * 1000L, Constants.EXECUTOR_NAME, () -> {
            return new SimpleResponse<Boolean>(service.add(po));
        });
    }

    @DeleteMapping("/{id}")
    @ApiOperation(value = "删除")
    public WebAsyncTask<SimpleResponse<?>> removeById(@PathVariable(name = "id", required = true) String id) {
        return new WebAsyncTask<SimpleResponse<?>>(30 * 1000L, Constants.EXECUTOR_NAME, () -> {
            return new SimpleResponse<Boolean>(service.deleteById(id));
        });
    }

    @GetMapping("/{id}")
    @ApiOperation(value = "根据ID获取单位信息")
    public WebAsyncTask<SimpleResponse<?>> findById(@PathVariable(name = "id", required = true) String id) {
        return new WebAsyncTask<SimpleResponse<?>>(30 * 1000L, Constants.EXECUTOR_NAME, () -> {
            return new SimpleResponse<CompanyPO>(service.findById(id));
        });
    }

    @PostMapping("/find")
    @ApiOperation(value = "获取公司列表")
    public WebAsyncTask<SimpleResponse<?>> getList(@RequestBody QueryCondition query) {
        return new WebAsyncTask<SimpleResponse<?>>(30 * 1000L, Constants.EXECUTOR_NAME, () -> {
            Map<String, Object> map = new HashMap<String, Object>();
            Page<CompanyPO> page = PageHelper.startPage(query.getPageNum(), query.getPageSize(), true, false, false);
            service.find(query.getSearchText());
            map.put("total", page.getTotal());
            map.put("rows", page.getResult());
            return new SimpleResponse<Object>(true, "操作成功", map);
        });
    }


}
